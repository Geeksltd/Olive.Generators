using System.Linq;
using System.Text;
using Olive;

namespace OliveGenerator
{
    internal class ReadmeFileGenerator
    {
        static string QueueName => Context.EndpointName.Replace(".", "-");
        static string ConsumerName => QueueName.TrimEnd("Endpoint").Split('-').Trim().Last();

        internal static string Generate()
        {
            var r = new StringBuilder();
            r.AppendLine();

            r.AppendLine($"The {Context.EndpointType.FullName}.Endpoint package is generated by: Olive Data Endpoint Generator.");
            r.AppendLine("To learn how to use it, visit: https://geeksltd.github.io/Olive/#/Api/Replication");
            r.AppendLine();
            r.AppendLine();

            r.AppendLine(GenerateQuickReference());

            return r.ToString();
        }

        static string GenerateQuickReference()
        {
            var r = new StringBuilder();

            r.AppendLine("STEP 1: REQUIRED NUGET PACKAGES");
            r.AppendLine("===================================================================");
            r.AppendLine("In the Website project, add the following nuget packages:");
            r.AppendLine();
            r.AppendLine("    - Olive.Entities.Data.Replication");
            r.AppendLine("    - Olive.EventBus");
            r.AppendLine("    - Olive.Aws.EventBus");
            r.AppendLine();
            r.AppendLine();
            r.AppendLine();

            r.AppendLine("STEP 2: CONFIGURE EVENT BUS");
            r.AppendLine("===================================================================");
            r.AppendLine("In Startup.cs, enable an event bus implementation for development as well as production:");
            r.AppendLine();
            r.AppendLine("public override void ConfigureServices(IServiceCollection services)");
            r.AppendLine("{");
            r.AppendLine("    ...");
            r.AppendLine("    if (Environment.IsDevelopment()) services.AddIOEventBus();");
            r.AppendLine("    else services.AddAwsEventBus();");
            r.AppendLine("}");
            r.AppendLine();
            r.AppendLine();
            r.AppendLine();

            r.AppendLine("STEP 3: KICK START THE ENGINE");
            r.AppendLine("===================================================================");
            r.AppendLine("In Startup.cs, kick start the engine using the following:");
            r.AppendLine();
            r.AppendLine("public override async Task OnStartUpAsync(IApplicationBuilder app)");
            r.AppendLine("{");
            r.AppendLine("    await base.OnStartUpAsync(app);");
            r.AppendLine($"    await new {Context.EndpointName}(typeof({Context.EndpointType.Namespace}.{Context.ExposedTypes.FirstOrDefault()?.GetType().Name}).Assembly).Subscribe();");
            r.AppendLine("}");
            r.AppendLine();
            r.AppendLine();
            r.AppendLine();

            r.AppendLine("STEP 4: CREATE QUEUES");
            r.AppendLine("===================================================================");
            r.AppendLine("If using AWS, create the following SQS queues, and take a note of their URLs and ARNs:");
            r.AppendLine($"    * {QueueName}.fifo");
            r.AppendLine($"    * {QueueName}-REFRESH.fifo");
            r.AppendLine();
            r.AppendLine($"Find (or create if you don't have one already) the IAM policy named 'SQS--{ConsumerName}Service' with the following Json (replace the correct ARNs):");
            r.AppendLine();
            r.AppendLine($@"{{
    ""Version"": ""2012-10-17"",
    ""Statement"": [
        {{
            ""Sid"": ""VisualEditor0"",
            ""Effect"": ""Allow"",
            ""Action"": [
                ""sqs:SendMessage"",
                ""sqs:SendMessageBatch"",
                ""sqs:PurgeQueue"",
                ""sqs:ReceiveMessage"",
                ""sqs:DeleteMessage"",
                ""sqs:DeleteMessageBatch""
            ],
            ""Resource"": [
                ""arn:aws:sqs:..............:{QueueName}*.fifo""
            ]
        }}
    ]
}}
");
            r.AppendLine($"Click on the newly created policy, and go under 'Policy Usage' and attach it to '{ConsumerName}Runtime'.");
            r.AppendLine();
            r.AppendLine();

            r.AppendLine("STEP 5: UPDATE APP SETTINGS");
            r.AppendLine("===================================================================");
            r.AppendLine("In appSettings.json file of both services, add the following.");
            r.AppendLine("Don't worry about the REFRESH queue. Its URL will be inferred by Olive automatically.");
            r.AppendLine();
            r.AppendLine("\"DataReplication\": {");
            r.AppendLine($"    \"{Context.EndpointName}\": {{");
            r.AppendLine($"        \"Url\": \"https://....{QueueName}.fifo\"");
            r.AppendLine("     }");
            r.AppendLine("}");

            return r.ToString();
        }
    }
}